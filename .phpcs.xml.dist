<?xml version="1.0"?>
<ruleset name="WordPress Plugin Coding Standards">
	<description>A custom set of code standard rules to check for WordPress plugins.</description>

	<!-- What to scan -->
	<file>.</file>
	<exclude-pattern>/vendor/</exclude-pattern>
	<exclude-pattern>/node_modules/</exclude-pattern>
	<exclude-pattern>/.git/</exclude-pattern>
	<exclude-pattern>/assets/</exclude-pattern>
	<exclude-pattern>/tests/</exclude-pattern>
	<exclude-pattern>/coverage/</exclude-pattern>
	<exclude-pattern>/build/</exclude-pattern>

	<!-- How to scan -->
	<!-- Usage instructions: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage -->
	<!-- Annotated ruleset: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<arg value="sp"/> <!-- Show sniff and progress -->
	<arg name="basepath" value="./"/><!-- Strip the file paths down to the relevant bit -->
	<arg name="colors"/>
	<arg name="extensions" value="php"/>
	<arg name="parallel" value="1"/><!-- Parallel processing disabled to avoid PHP 8+ compatibility issues with null paths -->

	<!-- Rules: Check PHP version compatibility -->
	<!-- https://github.com/PHPCompatibility/PHPCompatibility#sniffing-your-code-for-compatibility-with-specific-php-versions -->
	<config name="testVersion" value="8.0-"/>
	<!-- https://github.com/PHPCompatibility/PHPCompatibilityWP -->
	<rule ref="PHPCompatibilityWP"/>

	<!-- Rules: WordPress Coding Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards -->
	<!-- https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/wiki/Customizable-sniff-properties -->
	<config name="minimum_supported_wp_version" value="5.6"/>
	<rule ref="WordPress">
		<!-- Allow short array syntax -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax"/>
	</rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<!-- Value: replace the function, class, and variable prefixes used. -->
			<property name="prefixes">
				<element value="carbonfooter"/>
				<element value="CarbonFooter"/>
			</property>
		</properties>
	</rule>
	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Value: replace the text domain used. -->
			<property name="text_domain">
				<element value="carbonfooter"/>
			</property>
		</properties>
	</rule>
	<rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
		<properties>
			<property name="blank_line_check" value="true"/>
		</properties>
	</rule>

	<!-- Allow namespaced hook names in the format namespace/hook_name -->
	<rule ref="WordPress.NamingConventions.ValidHookName">
		<properties>
			<property name="additionalWordDelimiters" value="/"/>
		</properties>
	</rule>

	<!-- Relax style-only sniffs to focus on security/robustness for WP.org -->
	<rule ref="WordPress.PHP.YodaConditions">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.FileComment.WrongStyle">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.FileComment.SpacingAfterOpen">
		<severity>0</severity>
	</rule>
	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<severity>0</severity>
	</rule>
	<rule ref="Universal.Operators.DisallowShortTernary">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag.Missing">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamComment">
		<severity>0</severity>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.ParamCommentFullStop">
		<severity>0</severity>
	</rule>
</ruleset> 